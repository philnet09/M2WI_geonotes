
package jax;

import javax.jws.WebMethod;
import javax.jws.WebParam;
import javax.jws.WebResult;
import javax.jws.WebService;
import javax.xml.bind.annotation.XmlSeeAlso;
import javax.xml.ws.Action;
import javax.xml.ws.RequestWrapper;
import javax.xml.ws.ResponseWrapper;


/**
 * This class was generated by the JAX-WS RI.
 * JAX-WS RI 2.2.6-2b01 
 * Generated source version: 2.2
 * 
 */
@WebService(name = "UserService", targetNamespace = "http://jax/")
@XmlSeeAlso({
    ObjectFactory.class
})
public interface UserService {


    /**
     * 
     * @param prenom
     * @param mdp
     * @param email
     * @param nom
     */
    @WebMethod
    @RequestWrapper(localName = "ajouterUtilisateur", targetNamespace = "http://jax/", className = "jax.AjouterUtilisateur")
    @ResponseWrapper(localName = "ajouterUtilisateurResponse", targetNamespace = "http://jax/", className = "jax.AjouterUtilisateurResponse")
    @Action(input = "http://jax/UserService/ajouterUtilisateurRequest", output = "http://jax/UserService/ajouterUtilisateurResponse")
    public void ajouterUtilisateur(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "mdp", targetNamespace = "")
        String mdp,
        @WebParam(name = "nom", targetNamespace = "")
        String nom,
        @WebParam(name = "prenom", targetNamespace = "")
        String prenom);

    /**
     * 
     * @param mdp
     * @param email
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "utilisateurExiste", targetNamespace = "http://jax/", className = "jax.UtilisateurExiste")
    @ResponseWrapper(localName = "utilisateurExisteResponse", targetNamespace = "http://jax/", className = "jax.UtilisateurExisteResponse")
    @Action(input = "http://jax/UserService/utilisateurExisteRequest", output = "http://jax/UserService/utilisateurExisteResponse")
    public boolean utilisateurExiste(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "mdp", targetNamespace = "")
        String mdp);

    /**
     * 
     * @param mdp
     * @param email
     * @return
     *     returns jax.UtilisateurPOJO
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "getUtilisateur", targetNamespace = "http://jax/", className = "jax.GetUtilisateur")
    @ResponseWrapper(localName = "getUtilisateurResponse", targetNamespace = "http://jax/", className = "jax.GetUtilisateurResponse")
    @Action(input = "http://jax/UserService/getUtilisateurRequest", output = "http://jax/UserService/getUtilisateurResponse")
    public UtilisateurPOJO getUtilisateur(
        @WebParam(name = "email", targetNamespace = "")
        String email,
        @WebParam(name = "mdp", targetNamespace = "")
        String mdp);

    /**
     * 
     * @param email
     * @return
     *     returns boolean
     */
    @WebMethod
    @WebResult(targetNamespace = "")
    @RequestWrapper(localName = "emailUnique", targetNamespace = "http://jax/", className = "jax.EmailUnique")
    @ResponseWrapper(localName = "emailUniqueResponse", targetNamespace = "http://jax/", className = "jax.EmailUniqueResponse")
    @Action(input = "http://jax/UserService/emailUniqueRequest", output = "http://jax/UserService/emailUniqueResponse")
    public boolean emailUnique(
        @WebParam(name = "email", targetNamespace = "")
        String email);

}
